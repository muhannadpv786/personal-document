
pipeline {
    agent any
    
    tools {
    maven 'maven3'
    }

    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/muhannadpv786/Task-Master-Pro.git'
            }
        }
        
         stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        
         stage('Unit Test') {
            steps {
                sh 'mvn test'
            }
        }
        
         stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs --format table -o fs.html .'
            }
        }
        
         stage('SonarQube Analsyis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=BoardGame -Dsonar.projectKey=BoardGame \
                            -Dsonar.java.binaries=. '''
                }
            }
        }
        
        
        stage('Build Application') {
            steps {
             sh 'mvn package'   
            }
        }
        
        stage('Publish Artifact') {
            steps {
              withMaven(globalMavenSettingsConfig: 'settings-maven', jdk: '', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                  sh 'mvn deploy'
               }  
            }
        }
        
        stage('Docker Build & Tag') {
            steps {
                script {
              withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker ') {
                  sh 'docker build -t muhannadpv/taskmaster:latest .'
                 }  
            }
        }}
        
         stage('Trivy Image Scan') {
            steps {
                sh 'trivy image --format table -o image.html muhannadpv/taskmaster:latest'
            }
        }
        
         stage('Docker Push') {
            steps {
                script {
              withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker ') {
                  sh 'docker push muhannadpv/taskmaster:latest'
                 }  
            }
        }}
        
       stage(' K8 Deployment') {
            steps {
              withKubeConfig(caCertificate: '', clusterName: 'muhannadEKS-1', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://942880AA905F2342059CF9DFAD5C08E9.gr7.ap-south-1.eks.amazonaws.com') {
                  sh 'kubectl apply -f deployment-service.yml'
                  sleep 30
                }  
            }
        }
        
        stage('Verify K8 Deployment') {
            steps {
              withKubeConfig(caCertificate: '', clusterName: 'muhannadEKS-1', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://942880AA905F2342059CF9DFAD5C08E9.gr7.ap-south-1.eks.amazonaws.com') {
                  sh 'kubectl get pods -n webapps'
                  sh 'kubectl get svc -n webapps'
                }  
            }
        }
    }    
}
